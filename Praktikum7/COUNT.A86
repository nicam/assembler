;******************************************************************************
                NAME    SUMDIFF
;******************************************************************************
;  Funktion:    Liest op1 von den Schiebeschaltern an Adresse 705h sowie op2 von
;               den Schiebeschaltern an Adresse 704h und bildet die Summe
;               (op1 + op2) und die Differenz (op1 - op2).
;               Die Summe wird auf die 8 LEDs an Adresse 701h (links) ausge-
;               geben. Die Differenz wird an die 8 LEDS an Adresse 700h (rechts)
;               ausgegeben.
;******************************************************************************
.MODEL small
.186

;-----------    Symbol Definitionen  (= Konstanten)    --------------------
LED_LOADDR              EQU     0700h
LED_HIADDR              EQU     0701h
SEG7_ADDR               EQU     0702h
DIP_SWITCH_LOADDR       EQU     0704h
DIP_SWITCH_HIADDR       EQU     0705h
KEYS_ADDR               EQU     0706h
DATA_DISPLAY_ADDR       EQU     0708h

;------------  code section  ----------------------------------------------
.CODE

start:          MOV   AX,@data       ; Anfang des Datensegments
                MOV   DS,AX          ; laden

endless:
                ;---- Add your code below ----


                MOV    DX, DIP_SWITCH_LOADDR
                IN     AX, [DX]
                OR     AX, 0         ; set Zero Flag of AX
                MOV    BX, 0

myWhile:
                JZ     myEnd         ; while not ZF of AX
                SHR    AX, 1         ;   shift right AX
                JNC    myWhile       ;   if CF == 1
                SHL    BX, 1         ;     SHL BX, 1
                ADD    BX, 1         ;     ADD BX, CF(1)
                OR     AX, 0         ; set Zero Flag of AX
                JMP    myWhile
myEnd:                

                MOV    DX, LED_LOADDR
                MOV    AX, BX
                NOT    AX
                OUT    [DX], AX
                
                ;---- Add your code above ----
                JMP    endless


;------------  data section  --------------------------------------------
.DATA

;------------  stack section  --------------------------------------------
.STACK 100h

;-------------------------------------------------------------------------
                END     start



