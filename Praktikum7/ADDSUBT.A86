;******************************************************************************
                NAME    SUMDIFF
;******************************************************************************
;  Funktion:    Liest op1 von den Schiebeschaltern an Adresse 705h sowie op2 von
;               den Schiebeschaltern an Adresse 704h und bildet die Summe
;               (op1 + op2) und die Differenz (op1 - op2).
;               Die Summe wird auf die 8 LEDs an Adresse 701h (links) ausge-
;               geben. Die Differenz wird an die 8 LEDS an Adresse 700h (rechts)
;               ausgegeben.
;******************************************************************************
.MODEL small
.186

;-----------    Symbol Definitionen  (= Konstanten)    --------------------
LED_LOADDR              EQU     0700h
LED_HIADDR              EQU     0701h
SEG7_ADDR               EQU     0702h
DIP_SWITCH_LOADDR       EQU     0704h
DIP_SWITCH_HIADDR       EQU     0705h
KEYS_ADDR               EQU     0706h
DATA_DISPLAY_ADDR       EQU     0708h

;------------  code section  ----------------------------------------------
.CODE

start:          MOV   AX,@data       ; Anfang des Datensegments
                MOV   DS,AX          ; laden

endless:
                ;---- Add your code below ----

                MOV    DX, DIP_SWITCH_LOADDR
                IN     AX, [DX]               ; read operands A and B into AX

                ; ---- Aditition ----
                ADD    AL, AH                ; addiere BH + BL
                NOT    AL                    ; invert first operand of addition
                MOV    DX, LED_HIADDR        ; get high address
                OUT    [DX], AL              ; output first operand

                MOV AL, 0                    ; initialize output
                JNC   noCF1
                PUSHF
                OR AL, 00100000b
                POPF
noCF1:
                JNO noOF1
                PUSHF
                OR AL, 00010000b
                POPF
noOF1:
                MOV output, AL

                ; ---- read again
                MOV    DX, DIP_SWITCH_LOADDR
                IN     AX, [DX]              ; read operands A and B into AX

                ; ---- Subtraction ----
                SUB    AH, AL                ; subtrahiere AH - AL
                MOV    AL, AH
                MOV    AH, 0h
                NOT    AL                    ; invert first operand
                MOV    DX, LED_LOADDR
                OUT    [DX], AL              ; output first operand
                
                ; ---- set substraction carry bit if set
                MOV AL, output
                JNC   noCF2                ;if no carry jump to noFC2
                PUSHF
                OR  AL, 00000010b          ; set second byte because DF DIFF
                POPF
noCF2:
                ; ----- set overflow flag bit if set
                JNO noOF2                  ; if no overflow bit jump to noOf2
                PUSHF
                OR  AL, 00000100b
                POPF

noOF2:
                ; output the flag statuses
                MOV output, AL
                NOT    AL
                MOV    DX, SEG7_ADDR
                OUT    [DX], AL


                ;---- Add your code above ----
                JMP     endless

;------------  data section  --------------------------------------------
.DATA
output        DB 0

;------------  stack section  --------------------------------------------
.STACK 100h

;-------------------------------------------------------------------------
                END     start



