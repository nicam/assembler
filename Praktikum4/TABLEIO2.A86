;----------------------------------------------------
; CT Praktikum 4: Transfer Befehle
; Program frame
;----------------------------------------------------
.MODEL small
.186

;------------  Initial Declarations  ----------------
LED_LOADDR              EQU     0700h
LED_HIADDR              EQU     0701h
SEG7_ADDR               EQU     0702h
DIP_SWITCH_LOADDR       EQU     0704h
DIP_SWITCH_HIADDR       EQU     0705h
KEYS_ADDR               EQU     0706h
DATA_DISPLAY_ADDR       EQU     0708h

LOW_NIBBLE_MASK         EQU     0Fh
KEY_B0                  EQU     1

;------------  code section  ------------------------
.CODE

start:          MOV     AX,@data          ; Load the start of the Data segment
                MOV     DS,AX             ; into the DS register
                NOP

endless:    
                CALL    waitForKey
                
                ;---- Add your code below ----
                MOV    DX, DIP_SWITCH_LOADDR
				IN     AX, [DX]

				AND    AH, LOW_NIBBLE_MASK
				NOT    AX			
							
				MOV    DX, LED_LOADDR
				OUT    [DX], AX
				NOT    AX                ; fix notted input data because the index is fucked otherwise
				
				MOV    BX, OFFSET wordTable
				
				MOV    SI, AX
				SHR    SI, 8 ; Shift right 4 because we need to take ax and need to kill al of it
				SHL    SI, 1 ; shit left 1 to multiply with 2 because its a word tables
				MOV    [BX+SI], AX       ; write data into wordTable
				
				
				;------ SHOW current index in truellerli
				MOV    DX, KEYS_ADDR     ; read address of truellerli into dx
				IN     AL, [DX]          ; read truellerli
				SHR    AL, 4             ; shift right truellerli
				
				MOV    AH, 0h            ; null AH
				MOV    SI, AX            ; move aX into SI
				MOV    BX, OFFSET seg7Table
				MOV    AX, [BX+SI]
				MOV    DX, SEG7_ADDR
				OUT    [DX], AX
				
				
				;------- OUPUT Data from tables
				SHL    SI, 1;
				MOV    BX, OFFSET wordTable
				MOV    AX, [BX+SI]
				MOV    DX, DATA_DISPLAY_ADDR
				OUT    [DX], AX
				

                ;------- Add your code above  -------

                JMP     endless

;----------------------------------------------------
; Subroutines
;----------------------------------------------------
waitForKey:
        ; Wait until the key B0 is pressed (asserted)
        ; and released again
                PUSH    DX
                PUSH    AX
                MOV     DX,KEYS_ADDR

waitForAssert:
                IN      AL,[DX]
                TEST    AL,KEY_B0
                JNZ     waitForAssert

waitForRelease:
                IN      AL,[DX]
                TEST    AL,KEY_B0
                JZ      waitForRelease
                
                POP     AX
                POP     DX
                RET
;----------------------------------------------------

;------------  data section  ------------------------
.DATA
wordTable       DW      17 DUP (?)
seg7Table       DB      0C0h, 0F9h, 0A4h, 0B0h, 099h, 092h, 082h, 0F8h, 080h, 090h, 088h, 083h, 0C6h, 0A1h, 086h, 08Eh


;------------  stack section  ------------------------
.STACK 100h

;------------- end of program ------------------------
                END     start       ; start address for loader
